import streamlit as st
import sqlite3
import pandas as pd
from db.models import db, Tone, Hate, Comment, BaseModel
from peewee import *

def get_analyzed_data_with_filter(page=1, page_size=50, search_term="", filter_column=""):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        conn = sqlite3.connect("tone_analysis.db")
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        count_query = """
        SELECT COUNT(*) as count 
        FROM comment c
        LEFT JOIN tone t ON c.tone_id = t.id
        LEFT JOIN hate h ON c.hate_id = h.id
        """
        
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        base_query = """
        SELECT c.id, c.text, t.name as tone_name, h.name as hate_name
        FROM comment c
        LEFT JOIN tone t ON c.tone_id = t.id
        LEFT JOIN hate h ON c.hate_id = h.id
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        if search_term and filter_column:
            if filter_column == "text":
                where_clause = f"WHERE c.text LIKE '%{search_term}%'"
            elif filter_column == "tone_name":
                where_clause = f"WHERE t.name LIKE '%{search_term}%'"
            elif filter_column == "hate_name":
                where_clause = f"WHERE h.name LIKE '%{search_term}%'"
            else:
                where_clause = ""
        else:
            where_clause = ""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        if where_clause:
            count_query = f"{count_query} {where_clause}"
        
        count_result = pd.read_sql_query(count_query, conn)
        total_count = int(count_result.iloc[0]['count'])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–º
        query = f"{base_query} {where_clause} LIMIT {page_size} OFFSET {(page - 1) * page_size}"
        df = pd.read_sql_query(query, conn)
        
        conn.close()
        
        return df, total_count
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, 0

def main():
    st.title("üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    st.markdown("""
    –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏.
    """)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if "page_analyzed" not in st.session_state:
        st.session_state["page_analyzed"] = 1
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page_size_options = [10, 25, 50, 100]
    page_size = st.selectbox(
        "–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
        page_size_options,
        key="page_size_analyzed"
    )
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    st.markdown("#### üîç –§–∏–ª—å—Ç—Ä—ã:")
    
    col1, col2 = st.columns(2)
    
    with col1:
        tone_filter = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:",
            ["–í—Å–µ"] + ["–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"],
            key="tone_filter_analyzed"
        )
    
    with col2:
        hate_filter = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏:",
            ["–í—Å–µ"] + ["–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Å–∫–∞—Ä–±–ª–µ–Ω–∏—è", "–ö—Å–µ–Ω–æ—Ñ–æ–±–∏—è", "–ì–æ–º–æ—Ñ–æ–±–∏—è", "C–µ–∫—Å–∏–∑–º", "–õ—É–∫–∏–∑–º", "–î—Ä—É–≥–æ–µ"],
            key="hate_filter_analyzed"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    current_page = st.session_state["page_analyzed"]
    
    try:
        df, total_count = get_analyzed_data_with_filter(
            page=1,  # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            page_size=999999,  # –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            search_term="",
            filter_column=""
        )
        
        if df is not None and not df.empty:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º
            filtered_df = df.copy()
            
            if tone_filter != "–í—Å–µ":
                filtered_df = filtered_df[filtered_df['tone_name'] == tone_filter]
            
            if hate_filter != "–í—Å–µ":
                filtered_df = filtered_df[filtered_df['hate_name'] == hate_filter]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            start_idx = (current_page - 1) * page_size
            end_idx = start_idx + page_size
            paginated_df = filtered_df.iloc[start_idx:end_idx]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            total_pages = max(1, (len(filtered_df) + page_size - 1) // page_size)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(filtered_df))
            with col2:
                st.metric("–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", len(paginated_df))
            with col3:
                st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", total_pages)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
            if tone_filter != "–í—Å–µ" or hate_filter != "–í—Å–µ":
                filter_info = []
                if tone_filter != "–í—Å–µ":
                    filter_info.append(f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {tone_filter}")
                if hate_filter != "–í—Å–µ":
                    filter_info.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hate_filter}")
                st.info(f"üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: {', '.join(filter_info)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            st.markdown("#### üìã –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–æ–ª–µ–π
            df_display = paginated_df.copy()
            df_display['text'] = df_display['text'].apply(lambda x: x[:100] + "..." if len(str(x)) > 100 else x)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            df_display = df_display.rename(columns={
                'id': 'ID',
                'text': '–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è',
                'tone_name': '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
                'hate_name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏'
            })
            
            st.dataframe(df_display, use_container_width=True, hide_index=True)
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
            if total_pages > 1:
                st.markdown("#### –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:")
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                cols = st.columns(min(10, total_pages + 2))  # +2 –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –∏ "–°–ª–µ–¥—É—é—â–∞—è"
                
                # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
                if cols[0].button("‚óÄ", key="prev_analyzed", disabled=(current_page <= 1)):
                    if current_page > 1:
                        st.session_state["page_analyzed"] = current_page - 1
                        st.rerun()
                
                # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
                start_page = max(1, current_page - 4)
                end_page = min(total_pages, start_page + 8)
                
                for i, col in enumerate(cols[1:-1]):
                    page_num = start_page + i
                    if page_num <= end_page:
                        if col.button(str(page_num), key=f"page_analyzed_{page_num}", disabled=(page_num == current_page)):
                            st.session_state["page_analyzed"] = page_num
                            st.rerun()
                
                # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
                if cols[-1].button("‚ñ∂", key="next_analyzed", disabled=(current_page >= total_pages)):
                    if current_page < total_pages:
                        st.session_state["page_analyzed"] = current_page + 1
                        st.rerun()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                st.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            csv = filtered_df.to_csv(index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
                data=csv,
                file_name="analyzed_data.csv",
                mime="text/csv",
                key="download_analyzed"
            )
        
        elif df is not None and df.empty:
            st.info("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    main() 