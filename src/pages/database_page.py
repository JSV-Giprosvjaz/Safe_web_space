import streamlit as st
import sqlite3
import pandas as pd
from db.models import db, Tone, Hate, Comment, BaseModel
from peewee import *

def get_database_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("tone_analysis.db")
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        database_info = {}
        
        for table in tables:
            table_name = table[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(f"PRAGMA table_info({table_name});")
            columns = cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
            row_count = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö
            cursor.execute(f"PRAGMA foreign_key_list({table_name});")
            foreign_keys = cursor.fetchall()
            
            database_info[table_name] = {
                'columns': columns,
                'row_count': row_count,
                'foreign_keys': foreign_keys
            }
        
        conn.close()
        return database_info
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def display_table_structure(table_name, table_info):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    st.subheader(f"üìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", table_info['row_count'])
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
    st.markdown("#### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
    
    columns_data = []
    for col in table_info['columns']:
        columns_data.append({
            '–ü–æ–ª–µ': col[1],
            '–¢–∏–ø': col[2],
            'NOT NULL': '–î–∞' if col[3] else '–ù–µ—Ç',
            '–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é': str(col[4]) if col[4] else 'NULL',
            '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á': '–î–∞' if col[5] else '–ù–µ—Ç'
        })
    
    df_columns = pd.DataFrame(columns_data)
    st.dataframe(df_columns, use_container_width=True)
    
    # –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    if table_info['foreign_keys']:
        st.markdown("#### –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:")
        foreign_keys_data = []
        for fk in table_info['foreign_keys']:
            foreign_keys_data.append({
                '–¢–∞–±–ª–∏—Ü–∞': fk[2],
                '–ü–æ–ª–µ': fk[4],
                '–°—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞': fk[3]
            })
        
        df_fk = pd.DataFrame(foreign_keys_data)
        st.dataframe(df_fk, use_container_width=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü tone –∏ hate
    if table_name in ["tone", "hate"]:
        st.markdown("#### –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã:")
        try:
            conn = sqlite3.connect("tone_analysis.db")
            df_content = pd.read_sql_query(f"SELECT * FROM {table_name}", conn)
            conn.close()
            
            if not df_content.empty:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                if table_name == "tone":
                    df_content = df_content.rename(columns={'id': 'ID', 'name': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'})
                else:
                    df_content = df_content.rename(columns={'id': 'ID', 'name': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'})
                
                st.dataframe(df_content, use_container_width=True, hide_index=True)
            else:
                st.info("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
    
    st.divider()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üóÑÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

st.markdown("""
–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ç–∞–±–ª–∏—Ü—ã, –∏—Ö –ø–æ–ª—è, —Å–≤—è–∑–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.
""")

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
database_info = get_database_info()

if database_info:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    st.header("üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    total_tables = len(database_info)
    total_records = sum(info['row_count'] for info in database_info.values())
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü", total_tables)
    with col2:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", total_records)
    
    st.divider()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    st.header("üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü")
    
    for table_name, table_info in database_info.items():
        display_table_structure(table_name, table_info)
    
    # –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    st.header("üîó –°—Ö–µ–º–∞ —Å–≤—è–∑–µ–π")
    
    st.markdown("""
    **–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**
    
    ```
    Tone (–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    ‚îú‚îÄ‚îÄ id (Primary Key)
    ‚îî‚îÄ‚îÄ name (–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
    
    Hate (–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏)
    ‚îú‚îÄ‚îÄ id (Primary Key)
    ‚îî‚îÄ‚îÄ name (–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    
    Comment (–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
    ‚îú‚îÄ‚îÄ id (Primary Key)
    ‚îú‚îÄ‚îÄ text (–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    ‚îú‚îÄ‚îÄ tone_id (Foreign Key ‚Üí Tone.id)
    ‚îî‚îÄ‚îÄ hate_id (Foreign Key ‚Üí Hate.id)
    ```
    """)
    
    st.markdown("""
    **–û–ø–∏—Å–∞–Ω–∏–µ —Å–≤—è–∑–µ–π:**
    - –ö–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≤—è–∑–∞–Ω —Å –æ–¥–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é (tone_id)
    - –ö–∞–∂–¥—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≤—è–∑–∞–Ω —Å –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ (hate_id)
    - –û–¥–Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    - –û–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    """)
    
else:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.rerun() 