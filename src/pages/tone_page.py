import streamlit as st
import pandas as pd

st.header("–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
data = st.session_state.data_for_tone

if data is None:
    st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
    st.info("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä—ã –∏–ª–∏ —Ñ–∞–π–ª.")
    st.stop()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
if data.empty:
    st.error("–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
    st.stop()

# –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
TONE_MAPPING = {
    0: "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ",
    1: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", 
    2: "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"
}

# –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏
HATE_MAPPING = {
    0: "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Å–∫–∞—Ä–±–ª–µ–Ω–∏—è",
    1: "–ö—Å–µ–Ω–æ—Ñ–æ–±–∏—è",
    2: "–ì–æ–º–æ—Ñ–æ–±–∏—è", 
    3: "C–µ–∫—Å–∏–∑–º",
    4: "–õ—É–∫–∏–∑–º",
    5: "–î—Ä—É–≥–æ–µ"
}

# –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
display_data = data.copy()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if 'tone_prediction' in display_data.columns:
    display_data['tone_name'] = display_data['tone_prediction'].map(TONE_MAPPING)
    
if 'class_prediction' in display_data.columns:
    display_data['hate_name'] = display_data['class_prediction'].map(HATE_MAPPING)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
col1, col2, col3 = st.columns(3)

with col1:
    st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(data))

with col2:
    if 'tone_prediction' in data.columns:
        tone_counts = data['tone_prediction'].value_counts()
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π", len(tone_counts))
    else:
        st.metric("–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

with col3:
    if 'class_prediction' in data.columns:
        class_counts = data['class_prediction'].value_counts()
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤", len(class_counts))
    else:
        st.metric("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
st.write("### –§–∏–ª—å—Ç—Ä—ã")
col1, col2 = st.columns(2)

with col1:
    if 'tone_name' in display_data.columns:
        tone_filter = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
            ["–í—Å–µ"] + list(display_data['tone_name'].unique())
        )
    else:
        tone_filter = "–í—Å–µ"

with col2:
    if 'hate_name' in display_data.columns:
        hate_filter = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏",
            ["–í—Å–µ"] + list(display_data['hate_name'].unique())
        )
    else:
        hate_filter = "–í—Å–µ"

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
filtered_data = display_data.copy()

if tone_filter != "–í—Å–µ" and 'tone_name' in display_data.columns:
    filtered_data = filtered_data[filtered_data['tone_name'] == tone_filter]

if hate_filter != "–í—Å–µ" and 'hate_name' in display_data.columns:
    filtered_data = filtered_data[filtered_data['hate_name'] == hate_filter]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
if "page_tone" not in st.session_state:
    st.session_state["page_tone"] = 1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
page_size_options = [10, 25, 50, 100]
page_size = st.selectbox(
    "–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
    page_size_options,
    key="page_size_tone"
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
current_page = st.session_state["page_tone"]
start_idx = (current_page - 1) * page_size
end_idx = start_idx + page_size
paginated_data = filtered_data.iloc[start_idx:end_idx]

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
total_pages = max(1, (len(filtered_data) + page_size - 1) // page_size)

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(filtered_data))
with col2:
    st.metric("–ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", len(paginated_data))
with col3:
    st.metric("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü", total_pages)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
if tone_filter != "–í—Å–µ" or hate_filter != "–í—Å–µ":
    filter_info = []
    if tone_filter != "–í—Å–µ":
        filter_info.append(f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {tone_filter}")
    if hate_filter != "–í—Å–µ":
        filter_info.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hate_filter}")
    st.info(f"üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: {', '.join(filter_info)}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
st.write(f"### –ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(paginated_data)} –∏–∑ {len(filtered_data)}")

# –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
final_columns = ['sentence']
if 'author' in paginated_data.columns:
    final_columns.append('author')
if 'timestamp' in paginated_data.columns:
    final_columns.append('timestamp')
if 'source' in paginated_data.columns:
    final_columns.append('source')
if 'tone_name' in paginated_data.columns:
    final_columns.append('tone_name')
if 'hate_name' in paginated_data.columns:
    final_columns.append('hate_name')

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
result_data = paginated_data[final_columns].copy()
if 'sentence' in result_data.columns:
    result_data = result_data.rename(columns={'sentence': '–¢–µ–∫—Å—Ç'})
if 'author' in result_data.columns:
    result_data = result_data.rename(columns={'author': '–ê–≤—Ç–æ—Ä'})
if 'timestamp' in result_data.columns:
    result_data = result_data.rename(columns={'timestamp': '–í—Ä–µ–º—è'})
if 'source' in result_data.columns:
    result_data = result_data.rename(columns={'source': '–ò—Å—Ç–æ—á–Ω–∏–∫'})
if 'tone_name' in result_data.columns:
    result_data = result_data.rename(columns={'tone_name': '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'})
if 'hate_name' in result_data.columns:
    result_data = result_data.rename(columns={'hate_name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏'})

st.dataframe(result_data, hide_index=True, use_container_width=True)

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
if total_pages > 1:
    st.markdown("#### –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    cols = st.columns(min(10, total_pages + 2))  # +2 –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –∏ "–°–ª–µ–¥—É—é—â–∞—è"
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
    if cols[0].button("‚óÄ", key="prev_tone", disabled=(current_page <= 1)):
        if current_page > 1:
            st.session_state["page_tone"] = current_page - 1
            st.rerun()
    
    # –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    start_page = max(1, current_page - 4)
    end_page = min(total_pages, start_page + 8)
    
    for i, col in enumerate(cols[1:-1]):
        page_num = start_page + i
        if page_num <= end_page:
            if col.button(str(page_num), key=f"page_tone_{page_num}", disabled=(page_num == current_page)):
                st.session_state["page_tone"] = page_num
                st.rerun()
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
    if cols[-1].button("‚ñ∂", key="next_tone", disabled=(current_page >= total_pages)):
        if current_page < total_pages:
            st.session_state["page_tone"] = current_page + 1
            st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    st.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö
if 'tone_name' in display_data.columns or 'hate_name' in display_data.columns:
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if 'tone_name' in display_data.columns:
            st.write("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
            tone_counts = display_data['tone_name'].value_counts()
            st.bar_chart(tone_counts)
    
    with col2:
        if 'hate_name' in display_data.columns:
            st.write("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏")
            hate_counts = display_data['hate_name'].value_counts()
            st.bar_chart(hate_counts)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏
export_data = filtered_data.copy()  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if 'tone_prediction' in export_data.columns:
    export_data['tone_name'] = export_data['tone_prediction'].map(TONE_MAPPING)
if 'class_prediction' in export_data.columns:
    export_data['hate_name'] = export_data['class_prediction'].map(HATE_MAPPING)

csv = export_data.to_csv(index=False)
st.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (CSV)",
    data=csv,
    file_name="tone_analysis_results.csv",
    mime="text/csv",
    key="download_tone"
)
